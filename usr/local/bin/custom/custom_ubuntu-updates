#!/bin/bash

#   Filename    :   custom_ubuntu-updates
#   Type        :   Bash shell script
#   Comment     :   Automatic Ubuntu updates
#   Description :   Automated Ubuntu on BTRFS system installation maintenance.
#                   Requires main BTRFS partition to be auto-mounted in 
#                   /etc/fstab to /mnt/HDD/ or /mnt/HDD/ mount point.
#                   In any other case, adjust script's variables accordingly.

#   CLEAR CONSOLE OR TERMINAL SCREEN
#   ================================
clear

#   INSTALLATION SUBVOLUME DEFINITION
#   =================================
# 1. Our installation is inside a BTRFS subvolume. We need an extra mountpoint
#    for the system's partition so that we have the ability to manage our 
#    installation's subvolume (snapshot creation and deletion).
#    This mountpoint must have its own /etc/fstab entry.
#    The value below is an example.
ROOT_PARTITION_MOUNTPOINT="/mnt/my-parent-partition"
# 2. The name of the subvolume that our system uses for " / " mountpoint
#    The example below is default for Ubuntu.
MY_SUBVOLUME="@"

#   SNAPSHOT HANDLING  ****  COMMENT UNUSED SNAPSHOT PART  ****
#   ===========================================================

#   1. Delete old installation snapshots
for i in $(ls "$ROOT_PARTITION_MOUNTPOINT"/ | sort | grep "$MY_SUBVOLUME"-snapshot-on- | head -n -1); do
    sudo btrfs subvolume delete "$ROOT_PARTITION_MOUNTPOINT/$i"
done
#   2. Take a new snapshot of the installation
sudo btrfs subvolume snapshot "$ROOT_PARTITION_MOUNTPOINT/$MY_SUBVOLUME" "$ROOT_PARTITION_MOUNTPOINT/$MY_SUBVOLUME-snapshot-on-$(date +%Y-%m-%d-%T)"

#   SYSTEM UPDATES
#   ==============
#   1. package updates
sudo apt-get update
sudo apt-get --yes --force-yes dist-upgrade
sudo sync
#   2. apt cleaning
sudo apt-get --yes clean
sudo apt-get --yes autoclean
sudo apt-get --yes autoremove
#   3. fix possible dependency or breakage problems
sudo apt-get --yes --force-yes --fix-missing install
sudo apt-get --yes --force-yes --fix-broken install
sudo dpkg --configure -a
sudo sync

#   GRUB2 HANDLING
#   ==============
#   1. Define GRUB2 target file && update GRUB2 configuration
if [ -f /boot/grub/grub.cfg ]; then
    TARGET_FILE="/boot/grub/grub.cfg"
    sudo grub-mkconfig -o "$TARGET_FILE"
elif [ -f /boot/efi/EFI/ubuntu/grub.cfg ]; then
    TARGET_FILE="/boot/efi/EFI/ubuntu/grub.cfg"
    sudo grub-mkconfig -o "$TARGET_FILE"
fi

#   2. Offer GRUB2 installation for every disk on the system
for Disk in /dev/sd?; do
    echo -e "
GRUB2 configuration is updated. Do you want to install GRUB2 to disk
\033[1m$Disk\033[0m?
Type \033[1my\033[0m to install, or any other key to skip.
Press \033[1mCtrl + C\033[0m to exit this program."
    read -p "Type here: " GRUB_INSTALL_ANSWER
    if [[ $GRUB_INSTALL_ANSWER == y ]]; then
        sudo grub-install --recheck "$Disk"
    else
        echo -e "Ok $USER, not touching this disk..."
    fi
done
#   4. Sync disk I/O
sudo sync

#   SCRIPT END MESSAGES AND EXIT
#   1. Inform user on terminal/console screen
echo -e "
    Updates script is completed.
    ────────────────────────────

    The terminal window will remain open for updates inspection.
    Press any key to close it."
#   2. Inform user by notification ** if possible **
if [[ `which notify-send` ]]; then
    if [ -f /usr/share/icons/custom/donkey.svg ]; then
        notify-send -i /usr/share/icons/custom/donkey.svg -t 3000 "$MY_SUBVOLUME Updated. Check your terminal."
    else
        notify-send -t 3000  "$MY_SUBVOLUME Updated. Check your terminal."
    fi
fi
#   3. Wait for user's updates log inspection
read -s -n 1 key
#   4. Exit the script
clear
echo -e "
Key pressed!

The terminal window will close in four (4) seconds.
See you next time $USER"
# Wait for 4 (four) seconds...
sleep 4
# exit
exit 0
